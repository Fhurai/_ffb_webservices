name: Fanfictions Bookmark Webservices (API)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  DB_HOST: 127.0.0.1
  PHP_HOST: 127.0.0.1
  MYSQL_PORT: 3306
  HTTP_PORT: 7780

jobs:
  # 1) SonarQube analysis & tests across PHP versions
  sonar:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-version: ["8.2", "8.3", "8.4"]
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        ports:
          - "${{ env.MYSQL_PORT }}:3306"
        options: >-
          --health-cmd="mysqladmin ping -p$MYSQL_ROOT_PASSWORD"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Export DB credentials
        run: |
          echo "DB_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> $GITHUB_ENV
          echo "DB_USERNAME=${{ secrets.DB_USER }}"        >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}"    >> $GITHUB_ENV
          echo "DB_GUEST_PASSWORD=${{ secrets.DB_GUEST_PASSWORD }}" >> $GITHUB_ENV

      - name: Setup PHP ${{ matrix.php-version }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: mbstring,dom,fileinfo,curl,pdo_mysql,xdebug
          coverage: xdebug
          tools: composer

      - name: Secure MySQL client login
        run: |
          sudo apt-get update && sudo apt-get install -y expect
          expect -c '
            spawn mysql_config_editor set --login-path=client \
              --host=127.0.0.1 --user=root --port=3306 --password
            expect "Enter password:"
            send "${{ secrets.MYSQL_ROOT_PASSWORD }}\r"
            expect eof
          '
          mysql_config_editor print --login-path=client

      - name: Prepare test databases & users
        run: |
          mysql --login-path=client <<SQL
            CREATE DATABASE IF NOT EXISTS ffb_main;
            CREATE DATABASE IF NOT EXISTS ffb_stats;
            CREATE DATABASE IF NOT EXISTS ffb_tests;
            CREATE USER IF NOT EXISTS 'ffb_guest'@'%' IDENTIFIED BY '${{ secrets.DB_GUEST_PASSWORD }}';
            CREATE USER IF NOT EXISTS 'ffb_user'@'%'  IDENTIFIED BY '${{ secrets.DB_PASSWORD }}';
            CREATE USER IF NOT EXISTS 'ffb_admin'@'%' IDENTIFIED BY '${{ secrets.DB_ADMIN_PASSWORD }}';
            GRANT ALL PRIVILEGES ON ffb_main.*   TO 'ffb_user'@'%';
            GRANT ALL PRIVILEGES ON ffb_stats.*  TO 'ffb_user'@'%';
            GRANT ALL PRIVILEGES ON ffb_tests.*  TO 'ffb_user'@'%';
            GRANT SELECT ON ffb_main.*  TO 'ffb_guest'@'%';
            GRANT SELECT ON ffb_stats.* TO 'ffb_guest'@'%';
            GRANT ALL PRIVILEGES ON *.*   TO 'ffb_admin'@'%' WITH GRANT OPTION;
            FLUSH PRIVILEGES;
          SQL

      - name: Verify DB connection
        run: |
          mysql -h "${{ env.DB_HOST }}" \
                -u ffb_user \
                -p"${{ secrets.DB_PASSWORD }}" \
                -e "SHOW DATABASES;" || exit 1

      - name: Configure application
        run: |
          cp config/config.php.ci config/config.php
          sed -i "s/'DB_HOST', '.*'/'DB_HOST', '${{ env.DB_HOST }}'/g"     config/config.php
          sed -i "s/'DB_USER', '.*'/'DB_USER', '${{ secrets.DB_USER }}'/g" config/config.php
          sed -i "s/'DB_PASSWORD', '.*'/'DB_PASSWORD', '${{ secrets.DB_PASSWORD }}'/g" config/config.php
          sed -i "s/'PHP_HOST', '.*'/'PHP_HOST', '${{ env.PHP_HOST }}'/g"  config/config.php

      - name: Initialize database schema & seed data
        run: |
          chmod +x ./scripts/mysql-init.sh
          ./scripts/mysql-init.sh

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install PHP dependencies
        run: composer install --prefer-dist --no-progress

      - name: Start PHP built-in server
        run: php -S "${{ env.PHP_HOST }}:8080" -t . > /dev/null 2>&1 &

      - name: Wait for PHP server
        run: |
          for i in {1..10}; do
            if curl --fail http://"${{ env.PHP_HOST }}:8080"/health.php > /dev/null 2>&1; then
              echo "PHP server is ready"; break
            fi
            sleep 1
          done

      - name: Run PHPUnit with coverage
        run: chmod +x ./scripts/php-coverage.sh && ./scripts/php-coverage.sh

      - name: SonarQube scan
        id: sonar
        uses: SonarSource/sonarqube-scan-action@v5
        continue-on-error: true
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.php.coverage.reportPaths=clover.xml
            -Dsonar.scm.provider=git

  # 2) Generate and publish PHPDoc
  docs:
    name: Generate PHPDoc
    runs-on: ubuntu-latest
    needs: sonar
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup PHPDoc
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.3"
          tools: phpdoc

      - name: Run PHPDoc
        run: phpdoc -d src -t docs

      - name: Publish to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs

  # 3) Build & push Docker image
  docker-build:
    name: Build & Push Docker Image
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: sonar
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup QEMU & Buildx
        uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and Push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USER }}/api_ffb:latest

  # 4) Run Docker Compose integration tests
  compose-test:
    name: Docker Compose Integration
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure application for Compose
        run: |
          cp config/config.php.example config/config.php
          sed -i "s/'DB_HOST', '.*'/'DB_HOST', '${{ env.DB_HOST }}'/g"     config/config.php
          sed -i "s/'DB_USER', '.*'/'DB_USER', '${{ secrets.DB_USER }}'/g" config/config.php
          sed -i "s/'DB_PASSWORD', '.*'/'DB_PASSWORD', '${{ secrets.DB_PASSWORD }}'/g" config/config.php
          sed -i "s/'PHP_HOST', '.*'/'PHP_HOST', '${{ env.PHP_HOST }}'/g"  config/config.php

      - name: Start services with Docker Compose
        uses: docker/setup-compose-action@v1
        with:
          version: latest
      - run: docker compose up -d --build --force-recreate --remove-orphans

      - name: Wait for service health
        run: |
          for i in {1..12}; do
            statuses=(
              "$(docker inspect -f '{{.State.Health.Status}}' $(docker compose ps -q mysql)   2>/dev/null||echo healthy)"
              "$(docker inspect -f '{{.State.Health.Status}}' $(docker compose ps -q php)     2>/dev/null||echo healthy)"
              "$(docker inspect -f '{{.State.Health.Status}}' $(docker compose ps -q nginx)   2>/dev/null||echo healthy)"
            )
            if [[ "${statuses[*]}" =~ healthy ]]; then
              echo "All services healthy"; exit 0
            fi
            sleep 5
          done
          docker compose ps && exit 1

      - name: Verify MySQL databases
        run: |
          docker exec mysql_ffb \
            mysql -uroot -proot -e "SHOW DATABASES;" \
            | grep -E 'ffb_main|ffb_stats|ffb_tests'

      - name: Smoke-test API endpoint
        run: |
          HTTP_CODE=$(curl -s -w "%{http_code}" -o /tmp/resp.txt http://localhost:${{ env.HTTP_PORT }}/stats/parameters.php)
          grep -q 'label' /tmp/resp.txt || exit 1
          (( HTTP_CODE >= 200 && HTTP_CODE < 400 )) || exit 1

      - name: Run unit tests inside PHP container
        run: docker exec php_ffb ./scripts/php-unit.sh

  # 5) Notifications (Discord + Teams)
  notify:
    name: Notify (Discord & Teams)
    runs-on: ubuntu-latest
    needs: compose-test
    if: always()
    steps:
      - name: Set status & commit vars
        run: |
          echo "STATUS=${{ needs.compose-test.result }}" >> $GITHUB_ENV
          echo "COMMIT=${GITHUB_SHA::7}"                   >> $GITHUB_ENV

      - name: Send Discord notification
        run: |
          if [[ "$STATUS" == "success" ]]; then
            COLOR=3066993
            MSG="✅ Compose tests succeeded"
            IMG="https://c.tenor.com/Ud36Rrav628AAAAC/tenor.gif"
          else
            COLOR=15158332
            MSG="❌ Compose tests failed"
            IMG="https://c.tenor.com/nsEfkzN30TIAAAAC/tenor.gif"
          fi
          PAYLOAD=$(
            cat <<EOF
            {
              "embeds":[{ 
                "title":"$MSG",
                "description":"**Workflow**: ${{ github.workflow }}  \n**Repo**: ${{ github.repository }}  \n**Branch**: ${{ github.ref }}  \n**Commit**: [$COMMIT](${{ github.server_url }}/${{ github.repository }}/commit/${GITHUB_SHA})",
                "color":$COLOR,
                "image":{ "url":"$IMG" },
                "timestamp":"$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
              }]
            }
            EOF
          )
          curl -X POST -H "Content-Type: application/json" \
               -d "$PAYLOAD" ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Send Teams notification
        run: |
          if [[ "$STATUS" == "success" ]]; then
            THEME="00FF00"; TITLE="✅ Compose tests succeeded"; IMG="https://c.tenor.com/Ud36Rrav628AAAAC/tenor.gif"
          else
            THEME="FF0000"; TITLE="❌ Compose tests failed"; IMG="https://c.tenor.com/nsEfkzN30TIAAAAC/tenor.gif"
          fi
          CARD=$(
            cat <<EOF
            {
              "@type":"MessageCard",
              "@context":"http://schema.org/extensions",
              "themeColor":"$THEME",
              "title":"$TITLE",
              "sections":[{"text":"**Workflow**: ${{ github.workflow }}  \n**Repo**: ${{ github.repository }}  \n**Branch**: ${{ github.ref }}  \n**Commit**: [$COMMIT](${{ github.server_url }}/${{ github.repository }}/commit/${GITHUB_SHA})","images":[{"image":"$IMG"}],"markdown":true}]
            }
            EOF
          )
          curl -H "Content-Type: application/json" \
               -d "$CARD" ${{ secrets.TEAMS_WEBHOOK_URL }}
        continue-on-error: true
