name: Fanfictions Bookmark Webservices (API)

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # 1. SonarQube Analysis Job
  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-version: ["8.2", "8.3", "8.4"] # Test on multiple PHP versions

    services:
      mysql:
        image: mysql:8.0 # MySQL service for integration tests
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping -p$MYSQL_ROOT_PASSWORD"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
    steps:
      # Step 1: Clone the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set environment variables
      - name: Setup environment
        run: |
          echo "DB_HOST=127.0.0.1" >> $GITHUB_ENV
          echo "PHP_HOST=127.0.0.1" >> $GITHUB_ENV
          echo "DB_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> $GITHUB_ENV
          echo "DB_USERNAME=${{ secrets.DB_USER }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
          echo "DB_GUEST_PASSWORD=${{ secrets.DB_GUEST_PASSWORD }}" >> $GITHUB_ENV
      # Step 3: Setup PHP and extensions
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: mbstring, dom, fileinfo, curl, pdo_mysql, xdebug
          coverage: xdebug
          tools: composer

      # Step 4: Configure MySQL client securely
      - name: Configure MySQL client login path
        run: |
          sudo apt-get update
          sudo apt-get install -y expect
          expect -c '
            spawn mysql_config_editor set --login-path=client --host=127.0.0.1 --user=root --port=3306 --password
            expect "Enter password:"
            send "${{ secrets.MYSQL_ROOT_PASSWORD }}\r"
            expect eof
          '
          mysql_config_editor print --login-path=client
      # Step 5: Create databases and users for tests
      - name: Create MySQL databases
        run: |
          mysql --login-path=client -e "CREATE DATABASE IF NOT EXISTS ffb_main;"
          mysql --login-path=client -e "CREATE DATABASE IF NOT EXISTS ffb_stats;"
          mysql --login-path=client -e "CREATE DATABASE IF NOT EXISTS ffb_tests;"
          mysql --login-path=client -e "CREATE USER IF NOT EXISTS 'ffb_guest'@'%' IDENTIFIED BY '${{ secrets.DB_GUEST_PASSWORD }}';"
          mysql --login-path=client -e "CREATE USER IF NOT EXISTS 'ffb_user'@'%' IDENTIFIED BY '${{ secrets.DB_PASSWORD }}';"
          mysql --login-path=client -e "CREATE USER IF NOT EXISTS 'ffb_admin'@'%' IDENTIFIED BY '${{ secrets.DB_ADMIN_PASSWORD }}';"
          mysql --login-path=client -e "GRANT ALL PRIVILEGES ON ffb_main.* TO 'ffb_user'@'%';"
          mysql --login-path=client -e "GRANT ALL PRIVILEGES ON ffb_stats.* TO 'ffb_user'@'%';"
          mysql --login-path=client -e "GRANT ALL PRIVILEGES ON ffb_tests.* TO 'ffb_user'@'%';"
          mysql --login-path=client -e "GRANT SELECT ON ffb_main.* TO 'ffb_guest'@'%';"
          mysql --login-path=client -e "GRANT SELECT ON ffb_stats.* TO 'ffb_guest'@'%';"
          mysql --login-path=client -e "GRANT ALL PRIVILEGES ON *.* TO 'ffb_admin'@'%' WITH GRANT OPTION;"
          mysql --login-path=client -e "FLUSH PRIVILEGES;"
      # Step 6: Verify DB connection
      - name: Test MySQL connection
        run: |
          mysql -h 127.0.0.1 -uffb_user -p${{ secrets.DB_PASSWORD }} -e "SHOW DATABASES;" || echo "Connection failed"
      # Step 7: Setup config file for the app
      - name: Configure application
        run: |
          cp config/config.php.ci config/config.php
          sed -i "s/'DB_USER', '.*'/'DB_USER', '${{ secrets.DB_USER }}'/g" config/config.php
          sed -i "s/'DB_PASSWORD', '.*'/'DB_PASSWORD', '${{ secrets.DB_PASSWORD }}'/g" config/config.php
          sed -i "s/'DB_HOST', '.*'/'DB_HOST', '127.0.0.1'/g" config/config.php
          sed -i "s/'PHP_HOST', '.*'/'PHP_HOST', '127.0.0.1'/g" config/config.php
      - name: Verify config.php exists
        run: |
          if [ ! -f config/config.php ]; then
            echo "❌ Error: config/config.php was not created!"
            exit 1
          fi
          echo "✅ config/config.php verified"
      # Step 8: Initialize database with custom script
      - name: Initialize database
        run: |
          chmod +x ./scripts/mysql-init.sh
          ./scripts/mysql-init.sh
      # Step 9: Composer cache for faster builds
      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-
      # Step 10: Install PHP dependencies
      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      # Step 12: Start PHP development server
      - name: Start built-in PHP server
        run: php -S 127.0.0.1:8080 -t . > /dev/null 2>&1 &

      # Step 13: Wait until PHP server is ready
      - name: Wait for PHP built-in server to be ready
        run: |
          for i in {1..10}; do
            if curl --fail http://127.0.0.1 > /dev/null 2>&1; then
              echo "✅ PHP server is up"
              break
            fi
            echo "⏳ Waiting for PHP server..."
            sleep 1
          done
          if ! curl --fail http://127.0.0.1:8080 > /dev/null 2>&1; then
            echo "❌ PHP server did not start in time"
            exit 1
          fi
      - name: Script permissions
        run: chmod +x scripts/php-coverage.sh

      # Step 14: Run PHPUnit tests with code coverage
      - name: Run PHPUnit with coverage
        run: ./scripts/php-coverage.sh

      # Step 15: Run SonarQube scan
      - name: SonarQube Scan
        id: sonar_scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.php.coverage.reportPaths=clover.xml
            -Dsonar.scm.provider=git
        continue-on-error: true

  # 2. PHPDoc Generation
  docs:
    name: Generate PHPDoc
    runs-on: ubuntu-latest
    needs: sonarqube
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.3"
          tools: phpdoc

      - name: Generate docs
        run: phpdoc -d src -t docs

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs

      - name: Status
        if: always()
        run: 'echo "This job status is ${{ job.status }}"'

  # 3. Docker Image Build for API
  Docker-build-image-api:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: sonarqube
    steps:
      - uses: actions/checkout@v4

      - name: Set Up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set Up Docker Build
        uses: docker/setup-buildx-action@v3

      - name: Connect to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: List files in the repository
        run: ls ${{ github.workspace }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{secrets.DOCKERHUB_USER}}/api_ffb:latest

      - name: Status
        if: always()
        run: echo "This job status is ${{ job.status }}"

  # 4. Check docker-compose
  Compose-docker:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: Docker-build-image-api
    steps:
      - uses: actions/checkout@v4

      - name: Configure application
        run: |
          cp config/config.php.example config/config.php
          sed -i "s/'DB_USER', '.*'/'DB_USER', '${{ secrets.DB_USER }}'/g" config/config.php
          sed -i "s/'DB_PASSWORD', '.*'/'DB_PASSWORD', '${{ secrets.DB_PASSWORD }}'/g" config/config.php
          sed -i "s/'DB_HOST', '.*'/'DB_HOST', '127.0.0.1'/g" config/config.php
          sed -i "s/'PHP_HOST', '.*'/'PHP_HOST', '127.0.0.1'/g" config/config.php
      - name: Check folder contents
        run: ls -ll -R

      - name: Set up Docker Compose
        uses: docker/setup-compose-action@v1
        with:
          version: latest

      - name: Run Docker Compose
        run: docker compose up -d --build --force-recreate --remove-orphans

      - name: List containers
        run: docker compose ps

      - name: Wait for services to be healthy
        run: |
          retries=12
          delay=5
          for i in $(seq 1 $retries); do
            mysql_status=$(docker inspect --format='{{.State.Health.Status}}' $(docker compose ps -q mysql) 2>/dev/null || echo "null")
            php_status=$(docker inspect --format='{{.State.Health.Status}}' $(docker compose ps -q php) 2>/dev/null || echo "null")
            nginx_status=$(docker inspect --format='{{.State.Health.Status}}' $(docker compose ps -q nginx) 2>/dev/null || echo "null")
            # If health checks are not defined, assume container is healthy
            if [ "$mysql_status" == "null" ]; then mysql_status="healthy"; fi
            if [ "$php_status" == "null" ]; then php_status="healthy"; fi
            if [ "$nginx_status" == "null" ]; then nginx_status="healthy"; fi
            if [ "$mysql_status" = "healthy" ] && [ "$php_status" = "healthy" ] && [ "$nginx_status" = "healthy" ]; then
              echo "All containers are healthy."
              exit 0
            fi
            for container in $(docker ps -aq); do
              echo -n "$container: "
              docker inspect --format '{{.State.Health.Status}}' "$container" || echo "no health check"
            done
            echo "Waiting for containers to become healthy... ($i/$retries)"
            sleep $delay
          done
          echo "Containers did not become healthy in time"
          docker compose ps
          exit 1
      - name: Test MySQL connection
        run: docker exec mysql_ffb mysql -uroot -proot -e "SHOW DATABASES;" | grep -E 'ffb_main|ffb_stats|ffb_tests' || echo "One or more databases do not exist"

      - name: Test Nginx responds
        run: sleep 12 && curl -f http://localhost:7780/stats/parameters.php && echo "Curl call was successful" || echo "Curl call failed"

      - name: Test PHP service
        run: docker exec php_ffb php -v

      - name: Run tests
        run: docker exec php_ffb ./scripts/php-unit.sh
        continue-on-error: true

   # 5.A Discord Notification - SonarQube (develop branch)
  discord-notification-sonar:
    name: Discord Notification - SonarQube
    runs-on: ubuntu-latest
    needs: sonarqube
    if: always() && github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4  # Required to access the action

      - name: Get short commit SHA
        id: commit_short
        run: echo "sha_short=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Notify Discord
        uses: ./.github/actions/notify-discord  # Path to your action
        with:
          status: ${{ needs.sonarqube.result }}
          commit: ${{ steps.commit_short.outputs.sha_short }}
          sonar_url: "https://sonarcloud.io/dashboard?id=Fhurai__ffb_webservices&branch=${{ github.ref_name }}"
          discord_webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}

  # 5.B Discord Notification - Docker (main branch)
  discord-notification-docker:
    name: Discord Notification - Docker
    runs-on: ubuntu-latest
    needs: Compose-docker
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get short commit SHA
        id: commit_short
        run: echo "sha_short=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Notify Discord
        uses: ./.github/actions/notify-discord
        with:
          status: ${{ needs.Compose-docker.result }}
          commit: ${{ steps.commit_short.outputs.sha_short }}
          sonar_url: "https://sonarcloud.io/dashboard?id=Fhurai__ffb_webservices&branch=${{ github.ref_name }}"
          discord_webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}

  # 6.A Teams Notification - SonarQube (develop branch)
  teams-notification-sonar:
    name: Teams Notification - SonarQube
    runs-on: ubuntu-latest
    needs: sonarqube
    if: always() && github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get short commit SHA
        id: commit_short
        run: echo "sha_short=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Notify Teams
        uses: ./.github/actions/notify-teams
        with:
          status: ${{ needs.sonarqube.result }}
          commit: ${{ steps.commit_short.outputs.sha_short }}
          sonar_url: "https://sonarcloud.io/dashboard?id=Fhurai__ffb_webservices&branch=${{ github.ref_name }}"
          teams_webhook: ${{ secrets.TEAMS_WEBHOOK_URL }}

  # 6.B Teams Notification - Docker (main branch)
  teams-notification-docker:
    name: Teams Notification - Docker
    runs-on: ubuntu-latest
    needs: Compose-docker
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get short commit SHA
        id: commit_short
        run: echo "sha_short=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Notify Teams
        uses: ./.github/actions/notify-teams
        with:
          status: ${{ needs.Compose-docker.result }}
          commit: ${{ steps.commit_short.outputs.sha_short }}
          sonar_url: "https://sonarcloud.io/dashboard?id=Fhurai__ffb_webservices&branch=${{ github.ref_name }}"
          teams_webhook: ${{ secrets.TEAMS_WEBHOOK_URL }}
