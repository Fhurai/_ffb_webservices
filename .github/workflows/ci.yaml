name: Fanfictions Bookmark Webservices (API)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  php-tests:
    name: PHP ${{ matrix.php-version }} Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-version: ['8.2', '8.3']  # Removed 8.4 until officially supported

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping -p$MYSQL_ROOT_PASSWORD"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup environment
      run: |
        echo "DB_HOST=127.0.0.1" >> $GITHUB_ENV
        echo "DB_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> $GITHUB_ENV
        echo "DB_USERNAME=${{ secrets.DB_USER }}" >> $GITHUB_ENV
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
        echo "DB_GUEST_PASSWORD=${{ secrets.DB_GUEST_PASSWORD }}" >> $GITHUB_ENV

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: mbstring, dom, fileinfo, curl, pdo_mysql
        coverage: xdebug
        tools: composer

    - name: Configure MySQL client login path
      run: |
        sudo apt-get update
        sudo apt-get install -y expect
        expect -c '
          spawn mysql_config_editor set --login-path=client --host=127.0.0.1 --user=root --port=3306 --password
          expect "Enter password:"
          send "${{ secrets.MYSQL_ROOT_PASSWORD }}\r"
          expect eof
        '
        mysql_config_editor print --login-path=client

    - name: Create MySQL databases
      run: |
        # Create databases
        mysql --login-path=client -e "CREATE DATABASE IF NOT EXISTS ffb_main;"
        mysql --login-path=client -e "CREATE DATABASE IF NOT EXISTS ffb_stats;"
        mysql --login-path=client -e "CREATE DATABASE IF NOT EXISTS ffb_tests;"

        # Create users and grant privileges using secrets
        mysql --login-path=client -e "CREATE USER IF NOT EXISTS 'ffb_guest'@'%' IDENTIFIED BY '${{ secrets.DB_GUEST_PASSWORD }}';"
        mysql --login-path=client -e "CREATE USER IF NOT EXISTS 'ffb_user'@'%' IDENTIFIED BY '${{ secrets.DB_PASSWORD }}';"
        mysql --login-path=client -e "CREATE USER IF NOT EXISTS 'ffb_admin'@'%' IDENTIFIED BY '${{ secrets.DB_ADMIN_PASSWORD }}';"

        # Grant privileges
        mysql --login-path=client -e "GRANT ALL PRIVILEGES ON ffb_main.* TO 'ffb_user'@'%';"
        mysql --login-path=client -e "GRANT ALL PRIVILEGES ON ffb_stats.* TO 'ffb_user'@'%';"
        mysql --login-path=client -e "GRANT ALL PRIVILEGES ON ffb_tests.* TO 'ffb_user'@'%';"
        mysql --login-path=client -e "GRANT SELECT ON ffb_main.* TO 'ffb_guest'@'%';"
        mysql --login-path=client -e "GRANT SELECT ON ffb_stats.* TO 'ffb_guest'@'%';"
        mysql --login-path=client -e "GRANT ALL PRIVILEGES ON *.* TO 'ffb_admin'@'%' WITH GRANT OPTION;"
        mysql --login-path=client -e "FLUSH PRIVILEGES;"

    - name: Test MySQL connection
      run: |
        mysql -h 127.0.0.1 -uffb_user -p${{ secrets.DB_PASSWORD }} -e "SHOW DATABASES;" || echo "Connection failed"

    - name: Configure application
      run: |
        cp config/config.php.example config/config.php
        sed -i "s/'DB_USER', '.*'/'DB_USER', '${{ secrets.DB_USER }}'/g" config/config.php
        sed -i "s/'DB_PASSWORD', '.*'/'DB_PASSWORD', '${{ secrets.DB_PASSWORD }}'/g" config/config.php
        sed -i "s/'DB_HOST', '.*'/'DB_HOST', '127.0.0.1'/g" config/config.php

    - name: Verify config.php
      run: |
        if ! grep -q "${{ secrets.DB_USER }}" config/config.php; then
          echo "❌ Error: Database user not configured properly"
          exit 1
        fi
        echo "✅ config.php verified"

    - name: Initialize database
      run: |
        chmod +x ./sql/init.sh
        ./sql/init.sh

    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress

    - name: Run tests
      env:
        DB_DATABASE: ffb_tests
      run: vendor/bin/phpunit

  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: php-tests
    steps:
      - uses: actions/checkout@v4
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  discord-notification-php-tests:
    name: Discord Notification - PHP Tests
    runs-on: ubuntu-latest
    needs: php-tests
    steps:
      - name: Send Discord notification
        if: always()
        run: |
          STATUS="${{ job.status }}"
          if [ "$STATUS" = "success" ]; then
            COLOR=3066993
            MESSAGE="✅ FFB Webservices - Tests Succeeded"
            IMAGE_URL="https://c.tenor.com/Ud36Rrav628AAAAC/tenor.gif"
          else
            COLOR=15158332
            MESSAGE="❌ Fanfictions Bookmark Webservices (API) Failed"
            IMAGE_URL="https://c.tenor.com/nsEfkzN30TIAAAAC/tenor.gif"
          fi

          PAYLOAD=$(cat <<EOF
          {
            "embeds": [{
              "title": "${MESSAGE}",
              "description": "**Workflow**: ${{ github.workflow }}\n**Repository**: ${{ github.repository }}\n**Branch**: ${{ github.ref }}\n**Commit**: [${GITHUB_SHA:0:7}](${{ github.server_url }}/${{ github.repository }}/commit/$GITHUB_SHA)",
              "color": ${COLOR},
              "image": {
                "url": "${IMAGE_URL}"
              },
              "timestamp": "$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
            }]
          }
          EOF
          )

          curl -X POST -H "Content-Type: application/json" -d "$PAYLOAD" "$DISCORD_WEBHOOK_URL"
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}

  discord-notification-sonarqube:
    name: Discord Notification - SonarQube Analysis
    runs-on: ubuntu-latest
    needs: sonarqube
    steps:
      - name: Send Discord notification
        if: always()
        run: |
          STATUS="${{ job.status }}"
          if [ "$STATUS" = "success" ]; then
            COLOR=3066993
            MESSAGE="✅ FFB Webservices - Sonar Succeeded"
            IMAGE_URL="https://c.tenor.com/Ud36Rrav628AAAAC/tenor.gif"
          else
            COLOR=15158332
            MESSAGE="❌ Fanfictions Bookmark Webservices (API) Failed"
            IMAGE_URL="https://c.tenor.com/nsEfkzN30TIAAAAC/tenor.gif"
          fi

          PAYLOAD=$(cat <<EOF
          {
            "embeds": [{
              "title": "${MESSAGE}",
              "description": "**Workflow**: ${{ github.workflow }}\n**Repository**: ${{ github.repository }}\n**Branch**: ${{ github.ref }}\n**Commit**: [${GITHUB_SHA:0:7}](${{ github.server_url }}/${{ github.repository }}/commit/$GITHUB_SHA)",
              "color": ${COLOR},
              "image": {
                "url": "${IMAGE_URL}"
              },
              "timestamp": "$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
            }]
          }
          EOF
          )

          curl -X POST -H "Content-Type: application/json" -d "$PAYLOAD" "$DISCORD_WEBHOOK_URL"
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
