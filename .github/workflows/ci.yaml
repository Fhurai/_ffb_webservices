name: Fanfictions Bookmark Webservices (API)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-version: ["8.2", "8.3"]

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping -p$MYSQL_ROOT_PASSWORD"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up environment variables for database configuration
      - name: Setup environment
        run: |
          echo "DB_HOST=127.0.0.1" >> $GITHUB_ENV
          echo "DB_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> $GITHUB_ENV
          echo "DB_USERNAME=${{ secrets.DB_USER }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
          echo "DB_GUEST_PASSWORD=${{ secrets.DB_GUEST_PASSWORD }}" >> $GITHUB_ENV

      # Install and configure PHP with required extensions and tools
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: mbstring, dom, fileinfo, curl, pdo_mysql, xdebug
          coverage: xdebug
          tools: composer

      # Configure MySQL client login path for secure access
      - name: Configure MySQL client login path
        run: |
          sudo apt-get update
          sudo apt-get install -y expect
          expect -c '
            spawn mysql_config_editor set --login-path=client --host=127.0.0.1 --user=root --port=3306 --password
            expect "Enter password:"
            send "${{ secrets.MYSQL_ROOT_PASSWORD }}\r"
            expect eof
          '
          mysql_config_editor print --login-path=client

      # Create required MySQL databases and users
      - name: Create MySQL databases
        run: |
          mysql --login-path=client -e "CREATE DATABASE IF NOT EXISTS ffb_main;"
          mysql --login-path=client -e "CREATE DATABASE IF NOT EXISTS ffb_stats;"
          mysql --login-path=client -e "CREATE DATABASE IF NOT EXISTS ffb_tests;"
          mysql --login-path=client -e "CREATE USER IF NOT EXISTS 'ffb_guest'@'%' IDENTIFIED BY '${{ secrets.DB_GUEST_PASSWORD }}';"
          mysql --login-path=client -e "CREATE USER IF NOT EXISTS 'ffb_user'@'%' IDENTIFIED BY '${{ secrets.DB_PASSWORD }}';"
          mysql --login-path=client -e "CREATE USER IF NOT EXISTS 'ffb_admin'@'%' IDENTIFIED BY '${{ secrets.DB_ADMIN_PASSWORD }}';"
          mysql --login-path=client -e "GRANT ALL PRIVILEGES ON ffb_main.* TO 'ffb_user'@'%';"
          mysql --login-path=client -e "GRANT ALL PRIVILEGES ON ffb_stats.* TO 'ffb_user'@'%';"
          mysql --login-path=client -e "GRANT ALL PRIVILEGES ON ffb_tests.* TO 'ffb_user'@'%';"
          mysql --login-path=client -e "GRANT SELECT ON ffb_main.* TO 'ffb_guest'@'%';"
          mysql --login-path=client -e "GRANT SELECT ON ffb_stats.* TO 'ffb_guest'@'%';"
          mysql --login-path=client -e "GRANT ALL PRIVILEGES ON *.* TO 'ffb_admin'@'%' WITH GRANT OPTION;"
          mysql --login-path=client -e "FLUSH PRIVILEGES;"

      # Test the MySQL connection to ensure databases and users are configured correctly
      - name: Test MySQL connection
        run: |
          mysql -h 127.0.0.1 -uffb_user -p${{ secrets.DB_PASSWORD }} -e "SHOW DATABASES;" || echo "Connection failed"

      # Configure the application by copying and modifying the config file
      - name: Configure application
        run: |
          cp config/config.php.example config/config.php
          sed -i "s/'DB_USER', '.*'/'DB_USER', '${{ secrets.DB_USER }}'/g" config/config.php
          sed -i "s/'DB_PASSWORD', '.*'/'DB_PASSWORD', '${{ secrets.DB_PASSWORD }}'/g" config/config.php
          sed -i "s/'DB_HOST', '.*'/'DB_HOST', '127.0.0.1'/g" config/config.php

      # Verify that the config.php file was created successfully
      - name: Verify config.php exists
        run: |
          if [ ! -f config/config.php ]; then
            echo "❌ Error: config/config.php was not created!"
            exit 1
          fi
          echo "✅ config/config.php verified"

      # Initialize the database using the provided initialization script
      - name: Initialize database
        run: |
          chmod +x ./scripts/php-init.sh
          ./scripts/php-init.sh

      # Cache Composer dependencies to speed up subsequent runs
      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      # Install PHP dependencies using Composer
      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

      # List the contents of the current folder for debugging purposes
      - name: Check folder
        run: ls -ll

      # Start the built-in PHP server for testing
      - name: Start built-in PHP server
        run: php -S 127.0.0.1:8080 -t . > /dev/null 2>&1 &

      # Wait for the PHP server to be ready before proceeding
      - name: Wait for PHP built-in server to be ready
        run: |
          for i in {1..10}; do
            if curl --fail http://127.0.0.1 > /dev/null 2>&1; then
              echo "✅ PHP server is up"
              break
            fi
            echo "⏳ Waiting for PHP server..."
            sleep 1
          done

          if ! curl --fail http://127.0.0.1:8080 > /dev/null 2>&1; then
            echo "❌ PHP server did not start in time"
            exit 1
          fi

      # Run PHPUnit tests and generate a coverage report
      - name: Run PHPUnit with coverage
        run: ./vendor/bin/phpunit --coverage-clover clover.xml

      # Perform a SonarQube scan for code quality analysis
      - name: SonarQube Scan
        id: sonar_scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.php.coverage.reportPaths=clover.xml
            -Dsonar.scm.provider=git
        continue-on-error: true

  # Notify Discord about the SonarQube analysis results
  discord-notification-sonarqube:
    name: Discord Notification - SonarQube Analysis
    runs-on: ubuntu-latest
    needs: sonarqube
    if: always()
    steps:
      # Send a notification to Discord with the analysis results
      - name: Send Discord notification
        run: |
          STATUS="${{ needs.sonarqube.result }}"
          COMMIT_SHORT=$(echo $GITHUB_SHA | cut -c1-7)
          if [ "$STATUS" = "success" ]; then
            COLOR=3066993
            MESSAGE="✅ FFB Webservices - Sonar Succeeded"
            IMAGE_URL="https://c.tenor.com/Ud36Rrav628AAAAC/tenor.gif"
          else
            COLOR=15158332
            MESSAGE="❌ Fanfictions Bookmark Webservices (API) Failed"
            IMAGE_URL="https://c.tenor.com/nsEfkzN30TIAAAAC/tenor.gif"
          fi

          SONAR_URL="https://sonarcloud.io/dashboard?id=Fhurai__ffb_webservices&branch=main"

          PAYLOAD=$(cat <<EOF
          {
            "embeds": [{
              "title": "${MESSAGE}",
              "description": "**Workflow**: ${{ github.workflow }}\n**Repository**: ${{ github.repository }}\n**Branch**: ${{ github.ref }}\n**Commit**: [${COMMIT_SHORT}](${{ github.server_url }}/${{ github.repository }}/commit/$GITHUB_SHA)\n**SonarQube Analysis**: [View Results](${SONAR_URL})",
              "color": ${COLOR},
              "image": {
                "url": "${IMAGE_URL}"
              },
              "timestamp": "$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
            }]
          }
          EOF
          )

          curl -X POST -H "Content-Type: application/json" -d "$PAYLOAD" "$DISCORD_WEBHOOK_URL"
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}

  # Notify Microsoft Teams about the SonarQube analysis results
  teams-notification-sonarqube:
    name: Teams Notification - SonarQube Analysis
    runs-on: ubuntu-latest
    needs: sonarqube
    if: always()
    steps:
      # Send a notification to Microsoft Teams with the analysis results
      - name: Send Microsoft Teams notification
        env:
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
        run: |
          STATUS="${{ needs.sonarqube.result }}"
          COMMIT_SHORT=$(echo $GITHUB_SHA | cut -c1-7)
          if [ "$STATUS" = "success" ]; then
            COLOR="00FF00"
            MESSAGE="✅ FFB Webservices - Sonar Succeeded"
            IMAGE_URL="https://c.tenor.com/Ud36Rrav628AAAAC/tenor.gif"
          else
            COLOR="FF0000"
            MESSAGE="❌ FFB Webservices - Sonar Failed"
            IMAGE_URL="https://c.tenor.com/nsEfkzN30TIAAAAC/tenor.gif"
          fi

          SONAR_URL="https://sonarcloud.io/dashboard?id=Fhurai__ffb_webservices&branch=main"

          PAYLOAD=$(cat <<EOF
          {
            "@type": "MessageCard",
            "@context": "http://schema.org/extensions",
            "summary": "${MESSAGE}",
            "themeColor": "${COLOR}",
            "title": "${MESSAGE}",
            "sections": [{
              "text": "**Workflow**: ${{ github.workflow }}  \n**Repository**: ${{ github.repository }}  \n**Branch**: ${{ github.ref }}  \n**Commit**: [${COMMIT_SHORT}](${{ github.server_url }}/${{ github.repository }}/commit/$GITHUB_SHA)  \n**SonarQube Analysis**: [View Results](${SONAR_URL})",
              "images": [{
                "image": "${IMAGE_URL}"
              }],
              "markdown": true
            }]
          }
          EOF
          )

          curl -H "Content-Type: application/json" -d "$PAYLOAD" "$TEAMS_WEBHOOK_URL"
        continue-on-error: true

  # Check PHP code style using PHP CodeSniffer
  phpcs:
    name: PHP Code Style Check
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Install PHP and PHP CodeSniffer
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          tools: phpcs

      # Run PHP CodeSniffer to check code style
      - name: Run PHP CodeSniffer
        run: phpcs --standard=PSR12 src/ api/ tests/ --extensions=php --ignore=vendor,tests/Fixtures,tests/Fixtures/Tests.php --report=summary --report-file=phpcs-report.txt
        continue-on-error: true

      # Upload the PHP CodeSniffer report as an artifact
      - name: Upload PHPCS report
        uses: actions/upload-artifact@v4
        with:
          name: phpcs-report
          path: phpcs-report.txt
        continue-on-error: true

  # Generate PHP documentation using phpDocumentor
  docs:
    name: Generate PHPDoc
    runs-on: ubuntu-latest
    needs: sonarqube
    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Install PHP and phpDocumentor
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          tools: phpdoc

      # Generate PHP documentation
      - name: Generate docs
        run: phpdoc -d src -t docs

      # Deploy the generated documentation to GitHub Pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs

      # Display the GitHub Pages URL for the documentation
      - name: Show GitHub Pages URL (Need public repo)
        run: "echo \"🔗 PHPDocs deployed: https://fhurai.github.io/_ffb_webservices/\""
